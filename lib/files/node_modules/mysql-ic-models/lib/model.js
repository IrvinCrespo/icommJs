var functions = require("./functions");

module.exports = class Model{
    
    
    constructor(props,table,primary){
        if(props) Object.assign(this,props);
        if(table && primary)functions.config(table,primary)
        else functions.config(this.table,this.primaryKey)
    }

    static get _t(){
        return this.table
    }

    static get _pk(){
        return this.primaryKey
    }

    static get table(){
        
    }

    static get primaryKey(){
        
    }

    static build(){
        functions.config(this.table,this.primaryKey);
        return this
    }

    watcher(prop,oldVal,newVal){
        console.log("New val: ",newVal);
        if(newVal != oldVal){
            this.changed.push(newVal)
        }else{
            this.changed.pop(newVal);
        }
    }
    
    setTable(table){
        this.table = table;
    }

    save(){
        
        var props = Object.assign({}, this);
        return functions.save(props);
    }
    static async join(relation,primary,foreign){
        functions.andWhere(relation,primary,foreign);
        return this
    }

    static async find(id){
        let props = await functions.find(id)
        .then(res=>{
            return res;
        }).catch(error=>{
            throw error
        });
        Object.assign(this,props);
        return new Model(props,this.table,this.primaryKey);
    }

    static select(fields){
        this.query = functions.select(fields);
        return this
    }

    static join(relation,primary,foreign){
        functions.join(relation,primary,foreign);
        return this
    }
    
    static andWhere(key,op,val){
        functions.andWhere(key,op,val);
        return this
    }
    
    static where(key,op,val){
        this.query = functions.where(key,op,val);
        return this
    }
    
    static orWhere(key,op,val){
        return this
    }

    static update(fields){
        let res = functions.update(fields)
        .then(res=>{
            return res;
        })
        .catch(error=>{

        });
        return res;
    }
    
    
    static top(){
        return this
    }
    
    static desc(){
        return this
    }
    
    static asc(){
        return this
    }   
    
    static orderBy(field){
        return this
    }

    static async first(){
        let props = await functions.first()
        .then(res=>{
            //console.log("RES: ",res);
            return res;
        }).catch( error =>{
            
        });

        return props;
    }

    static async all(){
        let props = await functions.all()
        .then(res=>{
            return res;
        }).catch( error =>{
            
        });
        return props;
    }
    
    static hasMany(relation,primary,foreign){
    
    }
    
    static hasOne(relation,primary,foreign){
    
    }

}