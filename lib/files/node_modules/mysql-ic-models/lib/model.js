var functions = require("./functions");

module.exports = class Model{
    
    
    constructor(props,table){
        this.table = table;
        if(props) Object.assign(this,props);
        functions.config(this.table,this.primaryKey)
        
    }

    static get table(){
        
    }

    static get primaryKey(){

    }

    static build(){
        
        functions.config(this.table,this.primaryKey);
        return this
    }

    watcher(prop,oldVal,newVal){
        console.log("New val: ",newVal);
        if(newVal != oldVal){
            this.changed.push(newVal)
        }else{
            this.changed.pop(newVal);
        }
    }
    
    setTable(table){
        this.table = table;
    }

    save(){
        var props = Object.assign({}, this);
        console.log("Props:",props);
        functions.update(props)
    }

    static async find(id){
        let props = await functions.find(id)
        .then(res=>{
            return res;
        }).catch(error=>{
            throw error
        });
        Object.assign(this,props);
        return new Model(props);
    }

    static select(fields){
        this.query = functions.select(fields);
        return this
    }
    
    static andWhere(key,op,val){
        functions.andWhere(key,op,val);
        return this
    }
    
    static where(key,op,val){
        this.query = functions.where(key,op,val);
        return this
    }
    
    static orWhere(key,op,val){
        return this
    }
    
    static findOne(){
    
    }
    
    static top(){
        return this
    }
    
    static desc(){
        return this
    }
    
    static asc(){
        return this
    }   
    
    static orderBy(field){
        return this
    }

    static async first(){
        let props = await functions.first()
        .then(res=>{
            //console.log("RES: ",res);
            return res;
        }).catch(()=>{

        });
        
        Object.assign(this,props);
        return new Model(props);
    }
    
    static hasMany(relation,primary,foreign){
    
    }
    
    static hasOne(relation,primary,foreign){
    
    }

}