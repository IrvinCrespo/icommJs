var connection = null;
var connect = require("./connection").connection;

var table = "";
var primaryKey = "";
var wheres = [];
var orWheres = [];
var andWheres = [];
var joins = [];
var query = "";

var extras;

//build();
function config(tab,primary){
    table = tab
    primaryKey = primary?primary:"id";
    //query = "SELECT * FROM "+table;
    query = "";
}

function build(){
    connect(function(err,connec){
       
        connection = connec
    })
}

function first(){
    query += " LIMIT 1;";
    if(join.length > 0)
        buildJoins();
    return new Promise((result,reject)=>{
        connect(function(err,connection){
            connection.escape(query);
            connection.query(query,function(err,res){
                connection.release();
                if(err) return reject(err)
                var string= JSON.stringify(res);
                var json =  JSON.parse(string);
                return result(json[0])
            });
        })
        
    })
}

function all(){
    if(join.length > 0)
        buildJoins();
    return new Promise((result,reject)=>{
        connect(function(err,connection){
            connection.escape(query);
            connection.query(query,function(err,res){
                connection.release();
                console.log("RESPONSE ALL: ",res);
                if(err) return reject(err)
                var string= JSON.stringify(res);
                var json =  JSON.parse(string);
                return result(json)
            });
        })
        
    })
}

function select(fields){
    var selectf = "*"
    if(fields)selectf = table+"."+primaryKey+","+fields.join(",")+"";
    query =("SELECT "+selectf+" FROM "+table).concat(query);
    return query;
}

function where(key,op,val){
    query+=" WHERE "+key+" "+op+" "+(!isNaN(val)?parseInt(val):"'"+val+"'")+"";
    return query;
}

function andWhere(key,op,val){
    var str = key+op+(!isNaN(val)?parseInt(val):"'"+val+"'")+"";
    query+= " AND " + str;
    wheres.push({
        key:key,
        operador:op,
        value:val,
        condition:" AND "
    });
    return query;
}

function orWhere(key,op,val){
    var str = connection.escape(key+op+val);
    query+= " AND " + str;
    
    wheres.push({
        key:key,
        operador:op,
        value:val,
        condition:" OR "
    });
    return query;
}

//Regresar modelo :V
function find(id){

    query += " WHERE "+primaryKey+" = "+id
    query.concat("SELECT * FROM "+table)
    return new Promise((result,reject)=>{
        connect(function(err,connection){
            connection.escape(query);
            connection.query(query,function(err,res){
                connection.release();
                if(err) return reject(err)
                var string= JSON.stringify(res);
                var json =  JSON.parse(string);
                return result(json[0])
            });
        })
        
    })
}


function save(props){

    if(props[primaryKey]){
        return update(props)
    }else{
        return create(props)
    }
}

//Manipulating data

function create(props){
    var fields = []
    var values = []
    var strvals = "VALUES(";
    query = "INSERT INTO "+table+"(";
    let length = Object.keys(props).length;
    var count = 1;
    Object.keys(props).forEach(function(key) {
        values.push(props[key])
        query += key
        strvals += "?"
        if(count < length){
            query+=","
            strvals+=","
        }
        count++;
    })
    strvals+=")"
    query+=") "+strvals;
    return new Promise((result,reject)=>{
        connect(function(error,connection){
            values.forEach(element => {
                connection.escape(element);
            });
            connection.query(query,values,function(err,res,rows,fields){
                console.log("Error: ",err);
                if(err)return reject(err)
                return result(res)
            });
        })
    });

}

function updateMass(fields){
    //{field:value}
    var values = []
    let length = Object.keys(fields).length;
    var count = 1;
    var tmp = "";
    //query = query.replace("UPDATE "+table+" SET ",);
    //console.log("FIELDS: ",fields);
    Object.keys(fields).forEach(function(key) {
        //fields.push(key)
        values.push(fields[key])
        tmp += key+" = ?"
        if(count < length)
            tmp+=","
        count++;
    })
    query = ("UPDATE "+table+" SET "+tmp).concat(query);
    console.log("UPDATE: ",query);
    return new Promise((result,reject)=>{
        connect(function(error,connection){
            
            values.forEach(element => {
                connection.escape(element);
            });
           
            connection.query(query,values,function(err,res,rows,fields){
                console.log("Error: ",err);
                if(err)return reject(err)
                return result(res.changedRows)
            });
        })
    }); 

}

function update(props){
    var fields = []
    var values = []
    query = "UPDATE "+table+" SET ";
    let length = Object.keys(props).length;
    var count = 1;
    Object.keys(props).forEach(function(key) {
        //fields.push(key)
        values.push(props[key])
        query += key+" = ?"
        if(count < length)
            query+=","
        count++;
    })
    query+= " WHERE "+primaryKey+" = ?"
    values.push(props[primaryKey]);
    
    return new Promise((result,reject)=>{
        connect(function(error,connection){
            
            values.forEach(element => {
                connection.escape(element);
            });
           
            connection.query(query,values,function(err,res,rows,fields){
                console.log("Error: ",err);
                if(err)return reject(err)
                return result(res)
            });
        })
    });
    
}

function buildJoins(){
    var strjoin = "";
    joins.forEach(element => {
        strjoin+=" "+element.type+" JOIN "+element.table+" ON "+element.primary+" = "+element.foreign+" "
    });

    query = query.replace("FROM "+table,"FROM "+table+strjoin);
    console.log("QUERY JOIN: ",query);
    return query
}

function join(relation,primary,foreign){
    joins.push({
        type:"INNER",
        table:relation,
        primary:primary,
        foreign:foreign
    });
}

function top(){

}

function desc(){
    
}

function asc(){

}

function orderBy(field){

}

function hasMany(relation,primary,foreign){

}

function hasOne(relation,primary,foreign){

}

module.exports = {
    find:find,
    first:first,
    all:all,
    //update:update,
    update:updateMass,
    create:create,
    where:where,
    andWhere:andWhere,
    orWhere:orWhere,
    select:select,
    join:join,
    orderBy:orderBy,
    top:top,
    asc:asc,
    desc:desc,
    hasMany:hasMany,
    hasOne:hasOne,
    table:table,
    config:config,
    save:save
}